generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("KS_DB_URL")
}

model UnverifiedAccount {
  creation DateTime @default(now())
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  name     String
  updated  DateTime @default(now()) @updatedAt
}

model Account {
  creation       DateTime     @default(now())
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  isAdmin        Boolean
  email          String       @unique
  name           String
  updated        DateTime     @default(now()) @updatedAt
  // Relations:
  assignedTo     TaskStatus[] @relation("TaskAssigneeRelation")
  assignedToIds  String[]     @db.ObjectId
  magicLink      MagicLink?   @relation("MagicLink")
  managedTasks   Task[]       @relation("TaskManager", fields: [managedTaskIds], references: [id])
  managedTaskIds String[]     @db.ObjectId
  managerOf      Group[]      @relation("GroupManagersRelation", fields: [memberOfIds], references: [id])
  managerOfIds   String[]     @db.ObjectId
  memberOf       Group[]      @relation("GroupMembersRelation", fields: [memberOfIds], references: [id])
  memberOfIds    String[]     @db.ObjectId
  sentMessages   Message[]    @relation("MessageSender")
  session        Session?     @relation("AccountSession")
}

model Session {
  code     String   @unique @default(uuid())
  creation DateTime @default(now())
  for      Account? @relation("AccountSession", fields: [forId], references: [id])
  forId    String   @unique @db.ObjectId
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  updated  DateTime @default(now()) @updatedAt
}

model MagicLink {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String   @unique
  expiration DateTime
  for        Account  @relation("MagicLink", fields: [forId], references: [id])
  forId      String   @unique @db.ObjectId
}

type Attachment {
  creation DateTime       @default(now())
  type     AttachmentType
  value    String
}

enum AttachmentType {
  File
  Html
  Link
  Text
}

model Category {
  creation    DateTime     @default(now())
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  updated     DateTime     @default(now()) @updatedAt
  worth       Float        @default(1)
  resources   Resource[]   @relation("ResourceCategory")
  discussions Discussion[] @relation("DiscussionCategory")
  tasks       Task[]       @relation("TaskCategory")
}

model Discussion {
  creation   DateTime  @default(now())
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  isTopLevel Boolean
  name       String?
  updated    DateTime  @default(now()) @updatedAt
  // Relations:
  category   Category? @relation("DiscussionCategory", fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  content    Message[] @relation("Discusses")
  commentsOn Message?  @relation("Comments")
}

model Message {
  creation    DateTime     @default(now())
  content     Attachment[]
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  updated     DateTime     @default(now()) @updatedAt
  // Relations:
  comments    Discussion?  @relation("Comments", fields: [commentsId], references: [id])
  commentsId  String       @unique @db.ObjectId
  discusses   Discussion   @relation("Discusses", fields: [discussesId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  discussesId String       @db.ObjectId
  sender      Account      @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String       @db.ObjectId
}

model Group {
  creation   DateTime  @default(now())
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  updated    DateTime  @default(now()) @updatedAt
  // Relations:
  managers   Account[] @relation("GroupManagersRelation", fields: [managerIds], references: [id])
  managerIds String[]  @db.ObjectId
  members    Account[] @relation("GroupMembersRelation", fields: [memberIds], references: [id])
  memberIds  String[]  @db.ObjectId
  periods    Period[]  @relation("GroupPeriodRelation", fields: [periodIds], references: [id])
  periodIds  String[]  @db.ObjectId
}

model Period {
  creation     DateTime    @default(now())
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  times        TimeBlock[]
  updated      DateTime    @default(now()) @updatedAt
  // Relations:
  scheduledFor Group[]     @relation("GroupPeriodRelation", fields: [groupIds], references: [id])
  groupIds     String[]    @db.ObjectId
}

type RepetitionSchedule {
  /// Weekdays should range from 0 - 6 where 0 is Sunday and 6 is Saturday.
  weekdays Int[]

  /// This field is inclusive: 1 means something is every week, while 2 means it is biweekly.
  weeksBetweenOccurrences Int
}

model Resource {
  attachments   Attachment[]
  creation      DateTime     @default(now())
  description   String
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  updated       DateTime     @default(now()) @updatedAt
  viewableAfter DateTime     @default(now())
  // Relations:
  category      Category?    @relation("ResourceCategory", fields: [categoryId], references: [id])
  categoryId    String       @db.ObjectId
}

model Task {
  attachments   Attachment[]
  creation      DateTime     @default(now())
  description   String
  due           DateTime
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  points        Float        @default(0)
  updated       DateTime     @default(now()) @updatedAt
  viewableAfter DateTime     @default(now())
  // Relations:
  category      Category?    @relation("TaskCategory", fields: [categoryId], references: [id])
  categoryId    String       @db.ObjectId
  manager       Account[]    @relation("TaskManager", fields: [managerIds], references: [id])
  managerIds    String[]     @db.ObjectId
  statuses      TaskStatus[] @relation("TaskStatusRelation")
  statusIds     String[]     @db.ObjectId
}

model TaskStatus {
  attachments Attachment[]
  creation    DateTime     @default(now())
  due         DateTime
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  missing     Boolean
  score       Float        @default(0)
  updated     DateTime     @default(now()) @updatedAt
  // Relations:
  assignee    Account      @relation("TaskAssigneeRelation", fields: [assigneeId], references: [id])
  assigneeId  String       @db.ObjectId
  statusFor   Task         @relation("TaskStatusRelation", fields: [statusForId], references: [id])
  statusForId String       @db.ObjectId
}

type TimeBlock {
  endDate   DateTime
  endTime   Int
  schedule  RepetitionSchedule?
  startDate DateTime
  startTime Int
}
