generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("KS_DB_URL")
}

model UnverifiedAccount {
  creation DateTime @default(now())
  email    String   @unique
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  updated  DateTime @default(now()) @updatedAt
}

model Account {
  creation                 DateTime           @default(now())
  email                    String             @unique
  id                       String             @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  updated                  DateTime           @default(now()) @updatedAt
  permissions              String[]
  // Relations:
  assignedTo               AssignmentStatus[] @relation("AssignmentAssignee")
  magicLink                MagicLink?         @relation("MagicLink")
  managedAssignments       Assignment[]       @relation("AssignmentManager", fields: [managedAssignmentIds], references: [id])
  managedAssignmentIds     String[]           @db.ObjectId
  managedCardDecks         CardDeck[]         @relation("CardDeckManager")
  managedDiscussions       Discussion[]       @relation("DiscussionManager", fields: [managedDiscussionIds], references: [id])
  managedDiscussionIds     String[]           @db.ObjectId
  commentableDiscussions   Discussion[]       @relation("DiscussionViewer", fields: [commentableDiscussionIds], references: [id])
  commentableDiscussionIds String[]           @db.ObjectId
  managerOf                Group[]            @relation("GroupManagers", fields: [managerOfIds], references: [id])
  managerOfIds             String[]           @db.ObjectId
  memberOf                 Group[]            @relation("GroupMembers", fields: [memberOfIds], references: [id])
  memberOfIds              String[]           @db.ObjectId
  sentMessages             Message[]          @relation("MessageSender")
  session                  Session?           @relation("AccountSession")
  managedResources         Resource[]         @relation("ResourceManager", fields: [managedResourceIds], references: [id])
  managedResourceIds       String[]           @db.ObjectId
  viewedResources          Resource[]         @relation("ResourceViewer", fields: [viewedResourceIds], references: [id])
  viewedResourceIds        String[]           @db.ObjectId
  activityComments         ActivityComment[]  @relation("ActivityCommentAuthor")
}

model Session {
  code     String   @unique @default(uuid())
  creation DateTime @default(now())
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  updated  DateTime @default(now()) @updatedAt
  // Relations:
  for      Account? @relation("AccountSession", fields: [forId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  forId    String   @unique @db.ObjectId
}

model MagicLink {
  code       String   @unique
  expiration DateTime
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  // Relations:
  for        Account  @relation("MagicLink", fields: [forId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  forId      String   @unique @db.ObjectId
}

type Attachment {
  creation DateTime       @default(now())
  /// For a file, this is the ID of the file. For a link, this is the href.
  /// For HTML or text, this is the HTML or text.
  content  String
  /// For a file, this is the name of the file. For a link, this is the label.
  /// For HTML or text, this is usually an empty string.
  label    String
  type     AttachmentType
}

enum AttachmentType {
  File
  Html
  Link
  Text
}

model Category {
  creation    DateTime     @default(now())
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  updated     DateTime     @default(now()) @updatedAt
  weight      Float        @default(1)
  // Relations:
  groups      Group[]      @relation("GroupCategories", fields: [groupIds], references: [id])
  groupIds    String[]     @db.ObjectId
  resources   Resource[]   @relation("ResourceCategory")
  discussions Discussion[] @relation("DiscussionCategory")
  assignments Assignment[] @relation("AssignmentCategory")
}

model Discussion {
  attachments   Attachment[]
  creation      DateTime     @default(now())
  description   String?
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  isTopLevel    Boolean
  title         String
  updated       DateTime     @default(now()) @updatedAt
  viewableAfter DateTime
  // Relations:
  category      Category?    @relation("DiscussionCategory", fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  categoryId    String?      @db.ObjectId
  content       Message[]    @relation("Discusses")
  groups        Group[]      @relation("DiscussionGroups", fields: [groupIds], references: [id])
  groupIds      String[]     @db.ObjectId
  managers      Account[]    @relation("DiscussionManager", fields: [managerIds], references: [id])
  managerIds    String[]     @db.ObjectId
  commenters    Account[]    @relation("DiscussionViewer", fields: [commenterIds], references: [id])
  commenterIds  String[]     @db.ObjectId
}

model Message {
  attachments  Attachment[]
  body         String
  creation     DateTime     @default(now())
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  senderName   String
  updated      DateTime     @default(now()) @updatedAt
  // Relations:
  discusses    Discussion   @relation("Discusses", fields: [discussionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discussionId String       @db.ObjectId
  sender       Account      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId     String       @db.ObjectId
}

model Group {
  creation      DateTime     @default(now())
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  updated       DateTime     @default(now()) @updatedAt
  // Relations:
  assignments   Assignment[] @relation("AssignmentGroups", fields: [assignmentIds], references: [id])
  assignmentIds String[]     @db.ObjectId
  categories    Category[]   @relation("GroupCategories", fields: [categoryIds], references: [id])
  categoryIds   String[]     @db.ObjectId
  discussions   Discussion[] @relation("DiscussionGroups", fields: [assignmentIds], references: [id])
  discussionIds String[]     @db.ObjectId
  managers      Account[]    @relation("GroupManagers", fields: [managerIds], references: [id])
  managerIds    String[]     @db.ObjectId
  members       Account[]    @relation("GroupMembers", fields: [memberIds], references: [id])
  memberIds     String[]     @db.ObjectId
  periods       Period[]     @relation("GroupPeriod", fields: [periodIds], references: [id])
  periodIds     String[]     @db.ObjectId
  resources     Resource[]   @relation("ResourceGroups", fields: [resourceIds], references: [id])
  resourceIds   String[]     @db.ObjectId
}

model Period {
  creation     DateTime    @default(now())
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  times        TimeBlock[]
  updated      DateTime    @default(now()) @updatedAt
  // Relations:
  scheduledFor Group[]     @relation("GroupPeriod", fields: [groupIds], references: [id])
  groupIds     String[]    @db.ObjectId
}

type RepetitionSchedule {
  /// Weekdays should range from 0 - 6 where 0 is Sunday and 6 is Saturday.
  weekdays Int[]

  /// This field is inclusive: 1 means something is every week, while 2 means it is biweekly.
  weeksBetweenOccurrences Int
}

model Resource {
  attachments   Attachment[]
  creation      DateTime     @default(now())
  description   String
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  updated       DateTime     @default(now()) @updatedAt
  viewableAfter DateTime     @default(now())
  // Relations:
  category      Category     @relation("ResourceCategory", fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    String       @db.ObjectId
  groups        Group[]      @relation("ResourceGroups", fields: [groupIds], references: [id])
  groupIds      String[]     @db.ObjectId
  managers      Account[]    @relation("ResourceManager", fields: [managerIds], references: [id])
  managerIds    String[]     @db.ObjectId
  viewers       Account[]    @relation("ResourceViewer", fields: [viewerIds], references: [id])
  viewerIds     String[]     @db.ObjectId
}

model Assignment {
  attachments   Attachment[]
  creation      DateTime           @default(now())
  description   String
  due           DateTime
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  points        Float
  updated       DateTime           @default(now()) @updatedAt
  viewableAfter DateTime
  // Relations:
  category      Category           @relation("AssignmentCategory", fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    String             @db.ObjectId
  groups        Group[]            @relation("AssignmentGroups", fields: [groupIds], references: [id])
  groupIds      String[]           @db.ObjectId
  managers      Account[]          @relation("AssignmentManager", fields: [managerIds], references: [id])
  managerIds    String[]           @db.ObjectId
  statuses      AssignmentStatus[] @relation("AssignmentStatus")
}

model AssignmentStatus {
  attachments    Attachment[]
  body           String       @default("")
  creation       DateTime     @default(now())
  due            DateTime
  /// `exempt` and `missing` should never both be `true` at once.
  exempt         Boolean
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  /// `exempt` and `missing` should never both be `true` at once.
  missing        Boolean
  score          Float?
  submitted      DateTime?
  teacherComment String       @default("")
  updated        DateTime     @default(now()) @updatedAt
  // Relations:
  assignee       Account      @relation("AssignmentAssignee", fields: [assigneeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assigneeId     String       @db.ObjectId
  assignment     Assignment   @relation("AssignmentStatus", fields: [assignmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignmentId   String       @db.ObjectId
}

type TimeBlock {
  endDate   DateTime
  endTime   Int
  schedule  RepetitionSchedule?
  startDate DateTime
  startTime Int
}

model Upload {
  blob    Bytes
  created DateTime @default(now())
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  updated DateTime @updatedAt
}

type Card {
  id           String
  question     String
  answer       String
  alternatives String[]
}

model CardDeck {
  cards     Card[]
  creation  DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  public    Boolean  @default(false)
  title     String
  updated   DateTime @default(now()) @updatedAt
  // Relations:
  manager   Account  @relation("CardDeckManager", fields: [managerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  managerId String   @db.ObjectId
}

model ActivityComment {
  body       String
  creation   DateTime @default(now())
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  updated    DateTime @default(now()) @updatedAt
  // Relations:
  activity   Activity @relation("ActivityComments", fields: [activityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activityId String   @db.ObjectId
  author     Account  @relation("ActivityCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId   String   @db.ObjectId
}

model Activity {
  comments ActivityComment[] @relation("ActivityComments")
  creation DateTime          @default(now())
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  type     ActivityType
  updated  DateTime          @default(now()) @updatedAt

  // Poll
  options ActivityPollOption[]
}

enum ActivityType {
  Poll
}

type ActivityPollOption {
  title String
  /// User IDs:
  votes String[]
}
