generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("KS_DB_URL")
}

model UnverifiedAccount {
  creation DateTime @default(now())
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  name     String
  updated  DateTime @default(now()) @updatedAt
}

enum AssignmentView {
  Student
  Teacher
}

model Account {
  creation             DateTime           @default(now())
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  isAdmin              Boolean
  email                String             @unique
  name                 String
  updated              DateTime           @default(now()) @updatedAt
  // Relations:
  assignedTo           AssignmentStatus[] @relation("AssignmentAssignee")
  assignedToIds        String[]           @db.ObjectId
  magicLink            MagicLink?         @relation("MagicLink")
  managedAssignments   Assignment[]       @relation("AssignmentManager", fields: [managedAssignmentIds], references: [id])
  managedAssignmentIds String[]           @db.ObjectId
  managerOf            Group[]            @relation("GroupManagers", fields: [managerOfIds], references: [id])
  managerOfIds         String[]           @db.ObjectId
  memberOf             Group[]            @relation("GroupMembers", fields: [memberOfIds], references: [id])
  memberOfIds          String[]           @db.ObjectId
  sentMessages         Message[]          @relation("MessageSender")
  session              Session?           @relation("AccountSession")
}

model Session {
  code     String   @unique @default(uuid())
  creation DateTime @default(now())
  for      Account? @relation("AccountSession", fields: [forId], references: [id])
  forId    String   @unique @db.ObjectId
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  updated  DateTime @default(now()) @updatedAt
}

model MagicLink {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String   @unique
  expiration DateTime
  for        Account  @relation("MagicLink", fields: [forId], references: [id])
  forId      String   @unique @db.ObjectId
}

type Attachment {
  creation DateTime       @default(now())
  /// For a file, this is the ID of the file. For a link, this is the href.
  /// For HTML or text, this is the HTML or text.
  content  String
  /// For a file, this is the name of the file. For a link, this is the label.
  /// For HTML or text, this is usually an empty string.
  label    String
  type     AttachmentType
}

enum AttachmentType {
  File
  Html
  Link
  Text
}

model Category {
  creation    DateTime     @default(now())
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  updated     DateTime     @default(now()) @updatedAt
  weight      Float        @default(1)
  // Relations:
  groups      Group[]      @relation("GroupCategories", fields: [groupIds], references: [id])
  groupIds    String[]     @db.ObjectId
  resources   Resource[]   @relation("ResourceCategory")
  discussions Discussion[] @relation("DiscussionCategory")
  assignments Assignment[] @relation("AssignmentCategory")
}

model Discussion {
  creation   DateTime  @default(now())
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  isTopLevel Boolean
  title      String?
  updated    DateTime  @default(now()) @updatedAt
  // Relations:
  category   Category? @relation("DiscussionCategory", fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  content    Message[] @relation("Discusses")
  commentsOn Message?  @relation("Comments")
}

model Message {
  creation    DateTime     @default(now())
  content     Attachment[]
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  updated     DateTime     @default(now()) @updatedAt
  // Relations:
  comments    Discussion?  @relation("Comments", fields: [commentsId], references: [id])
  commentsId  String       @unique @db.ObjectId
  discusses   Discussion   @relation("Discusses", fields: [discussesId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  discussesId String       @db.ObjectId
  sender      Account      @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String       @db.ObjectId
}

model Group {
  creation      DateTime     @default(now())
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  updated       DateTime     @default(now()) @updatedAt
  // Relations:
  assignments   Assignment[] @relation("AssignmentGroups", fields: [assignmentIds], references: [id])
  assignmentIds String[]     @db.ObjectId
  categories    Category[]   @relation("GroupCategories", fields: [categoryIds], references: [id])
  categoryIds   String[]     @db.ObjectId
  managers      Account[]    @relation("GroupManagers", fields: [managerIds], references: [id])
  managerIds    String[]     @db.ObjectId
  members       Account[]    @relation("GroupMembers", fields: [memberIds], references: [id])
  memberIds     String[]     @db.ObjectId
  periods       Period[]     @relation("GroupPeriod", fields: [periodIds], references: [id])
  periodIds     String[]     @db.ObjectId
}

model Period {
  creation     DateTime    @default(now())
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  times        TimeBlock[]
  updated      DateTime    @default(now()) @updatedAt
  // Relations:
  scheduledFor Group[]     @relation("GroupPeriod", fields: [groupIds], references: [id])
  groupIds     String[]    @db.ObjectId
}

type RepetitionSchedule {
  /// Weekdays should range from 0 - 6 where 0 is Sunday and 6 is Saturday.
  weekdays Int[]

  /// This field is inclusive: 1 means something is every week, while 2 means it is biweekly.
  weeksBetweenOccurrences Int
}

model Resource {
  attachments   Attachment[]
  creation      DateTime     @default(now())
  description   String
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  updated       DateTime     @default(now()) @updatedAt
  viewableAfter DateTime     @default(now())
  // Relations:
  category      Category     @relation("ResourceCategory", fields: [categoryId], references: [id])
  categoryId    String       @db.ObjectId
}

model Assignment {
  attachments   Attachment[]
  creation      DateTime           @default(now())
  description   String
  due           DateTime
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  points        Float              @default(0)
  updated       DateTime           @default(now()) @updatedAt
  viewableAfter DateTime           @default(now())
  // Relations:
  category      Category           @relation("AssignmentCategory", fields: [categoryId], references: [id])
  categoryId    String             @db.ObjectId
  groups        Group[]            @relation("AssignmentGroups", fields: [groupIds], references: [id])
  groupIds      String[]           @db.ObjectId
  managers      Account[]          @relation("AssignmentManager", fields: [managerIds], references: [id])
  managerIds    String[]           @db.ObjectId
  statuses      AssignmentStatus[] @relation("AssignmentStatus")
  statusIds     String[]           @db.ObjectId
}

model AssignmentStatus {
  attachments    Attachment[]
  body           String       @default("")
  creation       DateTime     @default(now())
  due            DateTime
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  missing        Boolean
  score          Float?
  submitted      Boolean      @default(false)
  teacherComment String       @default("")
  updated        DateTime     @default(now()) @updatedAt
  // Relations:
  assignee       Account      @relation("AssignmentAssignee", fields: [assigneeId], references: [id])
  assigneeId     String       @db.ObjectId
  assignment     Assignment   @relation("AssignmentStatus", fields: [assignmentId], references: [id])
  assignmentId   String       @db.ObjectId
}

type TimeBlock {
  endDate   DateTime
  endTime   Int
  schedule  RepetitionSchedule?
  startDate DateTime
  startTime Int
}
